import org.springframework.boot.buildpack.platform.build.PullPolicy

plugins {
    id "java"
    alias(libs.plugins.spring.boot) apply(false)
    alias(libs.plugins.spring.dependency.management) apply(false)
}

allprojects {
    group = "com.yangxj96.saas"
    version = "0.0.1-SNAPSHOT"

    repositories {
        mavenLocal()
        maven { url = uri("https://maven.aliyun.com/repository/public/") }
        maven { url = uri("https://repo.spring.io/milestone") }
        maven { url = uri("https://oss.sonatype.org/content/repositories/snapshots/") }
        mavenCentral()
    }

}

subprojects {
    // 此处的插件由于在最外层的plugins中声明了. 且声明了版本号,此处能直接使用apply()
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: rootProject.libs.plugins.spring.boot.get().pluginId
    apply plugin: rootProject.libs.plugins.spring.dependency.management.get().pluginId

    // java源码和目标文件版本
    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    // 等同于dependencyManagement {}
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${rootProject.libs.versions.springCloud.get()}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${rootProject.libs.versions.springCloudAlibaba.get()}"
        }
    }

    dependencies {
        // 测试 begin
        testImplementation "org.springframework.boot:spring-boot-starter-test"
        // 测试 end
        compileOnly "org.jetbrains:annotations:${rootProject.libs.versions.jetbrains.get()}"
        // lombok
        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
    }

    // 指定中文编码
    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    // java编译任务设置
    tasks.named("compileJava") {
        inputs.files(tasks.named("processResources"))
    }

    // 测试
    tasks.named('test') {
        useJUnitPlatform()
    }

    bootBuildImage {
        // 是否推送到docker仓库
        publish.set(false)
        // 镜像名字
        // imageName.set("${project.name}:${project.version}")
        pullPolicy.set(PullPolicy.IF_NOT_PRESENT)
        // 构建器和运行环境
        builder.set("paketobuildpacks/builder:0.1.383-tiny")
        runImage.set("paketobuildpacks/run:1.3.128-tiny-cnb")
        // 环境变量
        var e = new HashMap<String, String>()
        e.put("HTTP_PROXY", "http://192.168.2.29:7890")
        e.put("HTTPS_PROXY", "http://192.168.2.29:7890")
        e.put("BPE_APPEND_JAVA_TOOL_OPTIONS", " -Duser.timezone=Asia/Shanghai -Xms256m -Xmx256m -Xmn100m")
        environment.set(e)
        // 构建缓存
        buildCache {
            volume {
                name.set("cache-${rootProject.name}.build")
            }
        }
        // 运行缓存
        launchCache {
            volume {
                name.set("cache-${rootProject.name}.launch")
            }
        }
    }

    // java doc任务设置
    javadoc {
        options {
            encoding("UTF-8")
        }
    }
}


