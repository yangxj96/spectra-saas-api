<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yangxj96.saas.server.auth.mapper.UserMapper">
    <!-- @formatter:off -->
    <resultMap id="BaseResultMap" type="com.yangxj96.saas.bean.user.Account">
        <!--@mbg.generated-->
        <!--@Table db_user.t_account-->
        <id column="id"                          jdbcType="BIGINT"    property="id"/>
        <result column="username"                jdbcType="VARCHAR"   property="username"/>
        <result column="password"                jdbcType="VARCHAR"   property="password"/>
        <result column="account_non_expired"     jdbcType="BOOLEAN"   property="accountNonExpired"/>
        <result column="account_non_locked"      jdbcType="BOOLEAN"   property="accountNonLocked"/>
        <result column="enabled"                 jdbcType="BOOLEAN"   property="enabled"/>
        <result column="credentials_non_expired" jdbcType="BOOLEAN"   property="credentialsNonExpired"/>
        <result column="created_user"            jdbcType="BIGINT"    property="createdUser"/>
        <result column="created_time"            jdbcType="TIMESTAMP" property="createdTime"/>
        <result column="updated_user"            jdbcType="BIGINT"    property="updatedUser"/>
        <result column="updated_time"            jdbcType="TIMESTAMP" property="updatedTime"/>
        <result column="deleted"                 jdbcType="TIMESTAMP" property="deleted"/>
    </resultMap>
    <!-- @formatter:on -->

    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id,
        username,
        "password",
        account_non_expired,
        account_non_locked,
        enabled,
        credentials_non_expired,
        created_user,
        created_time,
        updated_user,
        updated_time,
        deleted
    </sql>

    <insert id="relevance">
        INSERT INTO db_user.t_account_to_role(id, account_id, role_id, created_user, created_time, updated_user, updated_time)
        VALUES (#{id}, #{user}, #{role}, 0, now(), 0, now())
    </insert>

    <select id="getRoleByUserId" resultType="com.yangxj96.saas.bean.user.Role">
        SELECT r.*
        FROM db_user.t_role r,
        db_user.t_account_to_role tr,
        db_user.t_account u
        WHERE u.id = #{userId}
        AND r.id = tr.role_id
        AND tr.account_id = u.id
    </select>

    <select id="getAuthorityByRoleIds" resultType="com.yangxj96.saas.bean.user.Authority">
        SELECT DISTINCT (a.*)
        FROM db_user.t_authority a,
        db_user.t_role_to_authority ta
        WHERE a.id = ta.authority_id
        AND ta.role_id IN
        <foreach collection="ids" open="(" close=")" separator="," index="idx" item="item">
            #{item}
        </foreach>
    </select>

    <select id="getUserRoles" resultType="com.yangxj96.saas.bean.user.Role">
        SELECT tr.*
        FROM db_user.t_role tr,
             db_user.t_account_to_role tatr
        WHERE tatr.account_id = #{uid}
          AND tr.deleted IS NULL
          AND tatr.deleted IS NULL
          AND tatr.role_id = tr.id
    </select>
</mapper>
